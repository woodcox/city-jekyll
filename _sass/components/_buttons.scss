/**
 * Buttons
 */

// Main button styling
%buttons {
  -webkit-appearance: none;
  display: inline-block;
  border: $button-border-width $button-border-style $button-border-color;
  border-radius: $button-border-radius;
  background: $button-background;
  color: $button-color;
  font-weight: $button-font-weight;
  font-family: $button-font-family;
  font-size: $button-font-size;
  text-transform: $button-text-transform;
  padding: 0.75rem 1.25rem;
  margin: 0 0 0.5rem 0;
  vertical-align: middle;
  text-align: center;
  cursor: pointer;
  text-decoration: none;
  line-height: 1;
}

// Buttons on hover
%buttons-hover {
  border: $button-border-width $button-border-style darken($button-border-color, 10%);
  background: $button-background-hover;
  color: $button-color;
  text-decoration: none;
}

// Buttons on focus
%buttons-focus {
  border: $button-border-width $button-border-style darken($button-border-color, 10%);
  background: darken($button-background, 10%);
  color: $button-color;
  text-decoration: none;
}

// Apply styles to .button class, button element, and button-based inputs
#{$buttons} {
  @extend %buttons;

  &::-moz-focus-inner {
    border: 0;
    padding: 0;
  }

  &:hover {
    @extend %buttons-hover;
  }

  &:focus,
  &:active {
    @extend %buttons-focus;
  }
}

// Secondary button color
.accent-button,
a.accent-button {
  color: $accent-button-color;
  border: 1px solid $accent-button-background;
  background: $accent-button-background;

  &:hover,
  &:focus,
  &:active {
    color: $accent-button-color-hover;
    border: 1px solid darken($accent-button-background, 10%);
    background: darken($accent-button-background, 10%);
  }
}

// Muted buttons
.muted-button,
a.muted-button {
  background: $muted-background;
  border: $muted-border;
  color: $muted-color;
  transition: 0.25s;

  &.fill:hover,
  &.fill:focus,
  &.fill:active {
    color: $muted-color-hover;
    border: $muted-border-hover;
    background: $muted-background-hover;
    border-color: var(--hover);
  }
}

// Round buttons
.round-button,
a.round-button {
  border-radius: $round-buttons;
}

// Square buttons
.square-button,
a.square-button {
  border-radius: 0;
}

// Full width buttons (block level)
.full-button,
a.full-button {
  display: block;
  width: 100%;
}

/*
  https://developer.mozilla.org/en/docs/Web/CSS/box-shadow
  box-shadow: [inset?] [top] [left] [blur] [size] [color];

  Tips:
    - We're setting all the blurs to 0 since we want a solid fill.
    - Add the inset keyword so the box-shadow is on the inside of the element
    - Animating the inset shadow on hover looks like the element is filling in from whatever side you specify ([top] and [left] accept negative values to become [bottom] and [right])
    - Multiple shadows can be stacked
    - If you're animating multiple shadows, be sure to keep the same number of shadows so the animation is smooth. Otherwise, you'll get something choppy.
*/

//=== Set button colors
// If you wonder why use Sass vars or CSS custom properties...
  // Make a map with the class names and matching colors
$colors: (
  fill: #a972cb,
);

// Sass variables compile to a static string; CSS variables are dynamic and inherited
  // Loop through the map and set CSS custom properties using Sass variables
@each $button, $color in $colors {
  .#{$button} {
    --color: #{$color};
    --hover: #{adjust-hue($color, 45deg)};
  }
}

// Now every button will have different colors as set above. We get to use the same structure, only changing the custom properties.
button {  
  color: var(--color);
  transition: 0.25s;
  
  &:hover,
  &:focus { 
    border-color: var(--hover);
    color: #fff;
  }
}
