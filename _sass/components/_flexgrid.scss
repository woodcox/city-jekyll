/**
 * Flexgrid
 */

$flex-margins: 1rem;

%flex-grid {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
}

// Flex row
.flex-row {
  @extend %flex-grid;
  justify-content: center;
}

//======
.col {
  width: calc(33.333333% - 2rem);
  margin: 1rem;
  cursor: pointer;
}
//======

.flex-small,
.flex-large {
  @extend %column-padding;
  flex-basis: 100%;
  margin-bottom: $margin-bottom;
}

/* Small screen breakpoint */

@include small-breakpoint {
  .flex-small {
    flex: 1;
    margin-bottom: 0;
    &.half {
      flex: 0 0 calc(1 / 2 * 100%);
    }
    &.one-fourth {
      flex: 0 0 calc(1 / 4 * 100%);
    }
    &.three-fourths {
      flex: 0 0 calc(3 / 4 * 100%);
    }
    &.one-third {
      flex: 0 0 calc(1 / 3 * 100%);
    }
    &.two-thirds {
      flex: 0 0 calc(2 / 3 * 100%);
    }
  }
}

/* Large screen breakpoint */

@include large-breakpoint {
  .flex-large {
    flex: 1;
    margin-bottom: 0;
    &.half {
      flex: 0 0 calc(1 / 2 * 100%);
    }
    &.one-fourth {
      flex: 0 0 calc(1 / 4 * 100%);
    }
    &.three-fourths {
      flex: 0 0 calc(3 / 4 * 100%);
    }
    &.one-third {
      flex: 0 0 calc(1 / 3 * 100%);
    }
    &.two-thirds {
      flex: 0 0 calc(2 / 3 * 100%);
    }
  }
}

//======================================
// Flex grid
//======================================

@mixin flex-grid($cols: 2, $gap: 0, $media-queries: true) {

  @if $media-queries {
    // grid works only from small viewport and beyond
    @media screen and (min-width: 48em) {
      display: flex;
      flex-wrap: wrap;

      @if $gap > 0 {
        overflow: hidden;
        margin-left: -($gap);
        margin-right: -($gap);
      }
    }
  }

  & > * {
    width: 100%; // for IE 10

    @if $gap > 0 {
      margin-bottom: $gap * 2; // vertical space between items, relative to horizontal space
		}

    @if $media-queries != true {
      // contextual var
      $item-width: if($gap > 0, calc((100% / #{$cols}) - #{$gap * 2}), (100% / $cols));
      // ---------------
      flex: 0 0 $item-width;
      flex-basis: $item-width; // repeat for IE 11

      @if $gap > 0 {
        margin-left: $gap;
        margin-right: $gap;
       }
    } @else {

      // medium viewport
      @media screen and (min-width: 60em) {
        // contextual var
        $item-width: if($gap > 0, calc(50% - #{$gap * 2}), 50%);
        // ---------------
        flex: 0 0 $item-width;

        @if $gap > 0 {
          margin-left: $gap;
          margin-right: $gap;
         }
      }

      // MORE THAN 2 COLS
      @if $cols >= 3 {
        // large viewport
        @media screen and (min-width: 80em) {
          // contextual var
          $item-width: if($gap > 0, calc((100% / #{$cols}) - #{$gap * 2}), (100% / $cols));
          // ---------------
          flex-basis: $item-width;
        }
      }

      // MORE THAN 3 COLS
      @if $cols >= 4 {
        // large viewport
        @media screen and (min-width: 80em) {
          // contextual var
          $item-width: if($gap > 0, calc((100% / 3) - #{$gap * 2}), (100% / 3)); // always 3 cols on large viewport
          // ---------------
          flex-basis: $item-width;
        }

        // extra-large viewport
        @media screen and (min-width: 100em) {
          // contextual var
          $item-width: if($gap > 0, calc((100% / #{$cols}) - #{$gap * 2}), (100% / $cols));
          // ---------------
          flex-basis: $item-width;
        }
      }

      // MORE THAN 4 COLS
      @if $cols >= 5 {
        // large viewport
        @media screen and (min-width: 80em) {
          // contextual var
          $item-width: if($gap > 0, calc((100% / 4) - #{$gap * 2}), (100% / 4)); // always 4 cols on large viewport
          // ---------------
          flex-basis: $item-width;
        }

        // extra-large viewport
        @media screen and (min-width: 100em) {
          // contextual var
          $item-width: if($gap > 0, calc((100% / #{$cols}) - #{$gap * 2}), (100% / $cols));
          // ---------------
          flex-basis: $item-width;
        }
      }
    }
  }
}

.halves {
  @include flex-grid(2);
}

.thirds {
  @include flex-grid(3);
}

. {
  @include flex-grid(3);
}
